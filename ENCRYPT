import os
import base64
import tkinter as tk
from tkinter import filedialog, messagebox
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet

# ----------------------------------------
# üîë KEY DERIVATION FUNCTIONS
# ----------------------------------------

def generate_salt():
    return os.urandom(16)

def derive_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100_000,
        backend=default_backend()
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

# ----------------------------------------
# üîê ENCRYPTION / DECRYPTION FUNCTIONS
# ----------------------------------------

def encrypt_file(filepath, password):
    with open(filepath, 'rb') as f:
        data = f.read()

    salt = generate_salt()
    key = derive_key(password, salt)
    fernet = Fernet(key)
    encrypted = fernet.encrypt(data)

    encrypted_file = filepath + ".enc"
    with open(encrypted_file, 'wb') as f:
        f.write(salt + encrypted)

    return encrypted_file

def decrypt_file(filepath, password):
    with open(filepath, 'rb') as f:
        content = f.read()

    salt = content[:16]
    encrypted_data = content[16:]
    key = derive_key(password, salt)
    fernet = Fernet(key)
    decrypted = fernet.decrypt(encrypted_data)

    decrypted_file = filepath.replace(".enc", ".dec")
    with open(decrypted_file, 'wb') as f:
        f.write(decrypted)

    return decrypted_file

# ----------------------------------------
# üñ•Ô∏è GUI USING TKINTER
# ----------------------------------------

def select_file():
    filepath = filedialog.askopenfilename()
    file_path_entry.delete(0, tk.END)
    file_path_entry.insert(0, filepath)

def encrypt_action():
    filepath = file_path_entry.get()
    password = password_entry.get()

    if not filepath or not password:
        messagebox.showerror("Error", "File path and password are required.")
        return

    try:
        output = encrypt_file(filepath, password)
        messagebox.showinfo("Success", f"File encrypted successfully:\n{output}")
    except Exception as e:
        messagebox.showerror("Error", f"Encryption failed:\n{str(e)}")

def decrypt_action():
    filepath = file_path_entry.get()
    password = password_entry.get()

    if not filepath or not password:
        messagebox.showerror("Error", "File path and password are required.")
        return

    try:
        output = decrypt_file(filepath, password)
        messagebox.showinfo("Success", f"File decrypted successfully:\n{output}")
    except Exception as e:
        messagebox.showerror("Error", f"Decryption failed:\n{str(e)}")

# ----------------------------------------
# üéõÔ∏è TKINTER WINDOW SETUP
# ----------------------------------------

root = tk.Tk()
root.title("üîê Advanced Encryption Tool")
root.geometry("500x250")
root.resizable(False, False)

# File path input
tk.Label(root, text="Select File to Encrypt/Decrypt:").pack(pady=(10, 0))
file_path_entry = tk.Entry(root, width=60)
file_path_entry.pack(pady=5)
tk.Button(root, text="Browse", command=select_file).pack(pady=5)

# Password input
tk.Label(root, text="Enter Password:").pack()
password_entry = tk.Entry(root, show='*', width=40)
password_entry.pack(pady=5)

# Action buttons
button_frame = tk.Frame(root)
button_frame.pack(pady=20)

tk.Button(button_frame, text="Encrypt File", command=encrypt_action, bg="#4CAF50", fg="white", width=15).grid(row=0, column=0, padx=10)
tk.Button(button_frame, text="Decrypt File", command=decrypt_action, bg="#2196F3", fg="white", width=15).grid(row=0, column=1, padx=10)

root.mainloop()
